package com.isabella.dechat.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isabella.dechat.bean.PhotolistBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTOLIST_BEAN".
*/
public class PhotolistBeanDao extends AbstractDao<PhotolistBean, Long> {

    public static final String TABLENAME = "PHOTOLIST_BEAN";

    /**
     * Properties of entity PhotolistBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PicWidth = new Property(1, int.class, "picWidth", false, "PIC_WIDTH");
        public final static Property Timer = new Property(2, long.class, "timer", false, "TIMER");
        public final static Property PicHeight = new Property(3, int.class, "picHeight", false, "PIC_HEIGHT");
        public final static Property ImagePath = new Property(4, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property AlbumId = new Property(5, int.class, "albumId", false, "ALBUM_ID");
        public final static Property UserId = new Property(6, int.class, "userId", false, "USER_ID");
    }


    public PhotolistBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PhotolistBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTOLIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PIC_WIDTH\" INTEGER NOT NULL ," + // 1: picWidth
                "\"TIMER\" INTEGER NOT NULL ," + // 2: timer
                "\"PIC_HEIGHT\" INTEGER NOT NULL ," + // 3: picHeight
                "\"IMAGE_PATH\" TEXT," + // 4: imagePath
                "\"ALBUM_ID\" INTEGER NOT NULL ," + // 5: albumId
                "\"USER_ID\" INTEGER NOT NULL );"); // 6: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTOLIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotolistBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPicWidth());
        stmt.bindLong(3, entity.getTimer());
        stmt.bindLong(4, entity.getPicHeight());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(5, imagePath);
        }
        stmt.bindLong(6, entity.getAlbumId());
        stmt.bindLong(7, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotolistBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPicWidth());
        stmt.bindLong(3, entity.getTimer());
        stmt.bindLong(4, entity.getPicHeight());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(5, imagePath);
        }
        stmt.bindLong(6, entity.getAlbumId());
        stmt.bindLong(7, entity.getUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotolistBean readEntity(Cursor cursor, int offset) {
        PhotolistBean entity = new PhotolistBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // picWidth
            cursor.getLong(offset + 2), // timer
            cursor.getInt(offset + 3), // picHeight
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imagePath
            cursor.getInt(offset + 5), // albumId
            cursor.getInt(offset + 6) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotolistBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPicWidth(cursor.getInt(offset + 1));
        entity.setTimer(cursor.getLong(offset + 2));
        entity.setPicHeight(cursor.getInt(offset + 3));
        entity.setImagePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlbumId(cursor.getInt(offset + 5));
        entity.setUserId(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotolistBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotolistBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotolistBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
